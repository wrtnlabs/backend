import { INestiaConfig } from "@nestia/sdk";
import { NestFactory } from "@nestjs/core";
import { FastifyAdapter } from "@nestjs/platform-fastify";

import { HubModule } from "./src/HubModule";

export const NESTIA_CONFIG: INestiaConfig = {
  /**
   * Accessor of controller classes.
   *
   * You can specify it within two ways.
   *
   *   - Asynchronous function returning `INestApplication` instance
   *   - Specify the path or directory of controller class files
   */
  input: () => NestFactory.create(HubModule(), new FastifyAdapter()),

  /**
   * Building `swagger.json` is also possible.
   *
   * If not specified, you can't build the `swagger.json`.
   */
  swagger: {
    /**
     * Output path of the `swagger.json`.
     *
     * If you've configured only directory, the file name would be the `swagger.json`.
     * Otherwise you've configured the full path with file name and extension, the
     * `swagger.json` file would be renamed to it.
     */
    output: "packages/api/swagger.json",
    servers: [
      {
        url: "https://api2.dev.wrtn.club/ghd-be",
        description: "Dev Server",
      },
      {
        url: "https://api2.wrtn.ai/ghd-be",
        description: "Real Server",
      },
    ],
    security: {
      bearer: {
        type: "apiKey",
        name: "Authorization",
        in: "header",
      },
    },
    beautify: true,
  },

  /**
   * Output directory that SDK would be placed in.
   *
   * If not configured, you can't build the SDK library.
   */
  output: "src/api",

  /**
   * Target directory that SDK distribution files would be placed in.
   *
   * If you configure this property and runs `npx nestia sdk` command,
   * distribution environments for the SDK library would be generated.
   *
   * After the SDK library generation, move to the `distribute` directory,
   * and runs `npm publish` command, then you can share SDK library with
   * other client (frontend) developers.
   */
  distribute: "packages/api",

//   /**
//    * Allow simulation mode.
//    *
//    * If you configure this property to be `true`, the SDK library would be contain
//    * simulation mode. In the simulation mode, the SDK library would not communicate
//    * with the real backend server, but just returns random mock-up data
//    * with requestion data validation.
//    *
//    * For reference, random mock-up data would be generated by `typia.random<T>()`
//    * function.
//    *
//    * @default false
//    */
//   simulate: true,

  /**
   * Whether to wrap DTO by primitive type.
   *
   * If you don't configure this property as `false`, all of DTOs in the
   * SDK library would be automatically wrapped by {@link Primitive} type.
   *
   * For refenrece, if a DTO type be capsuled by the {@link Primitive} type,
   * all of methods in the DTO type would be automatically erased. Also, if
   * the DTO has a `toJSON()` method, the DTO type would be automatically
   * converted to return type of the `toJSON()` method.
   *
   * @default true
   */
  primitive: false,
};
export default NESTIA_CONFIG;
