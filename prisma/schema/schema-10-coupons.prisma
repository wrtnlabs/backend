/// Discount coupons.
///
/// `hub_coupons` is an entity that embodies discount coupons on the exchange.
///
/// However, `hub_coupons` only contains the specification information for 
/// discount coupons. Please note that this is a different concept from 
/// {@link hub_coupon_tickets}, which means issuing discount coupons, or 
/// {@link hub_coupon_ticket_payments}, which means paying them.
///
/// In addition, discount coupons are applied to {@link hub_orders order} units, 
/// but each has its own unique restrictions. For example, a coupon with a 
/// {@link hub_coupon_criteria_of_sellers seller restriction} can only be used for 
/// {@link hub_sale_snapshots listing snapshots} registered by the seller, or it 
/// cannot be used. In addition, there are restrictions such as a minimum amount 
/// limit for using discount coupons and a maximum discount amount.
///
/// In addition, you can set whether to issue discount coupons publicly or 
/// only to those who know a specific issuance code. In addition, there are 
/// restrictions such as having an expiration date for issued discount coupons, 
/// or only issuing them to customers who come in through a specific path.
///
/// For more information, please refer to the properties below and the 
/// sub-entities described later.
///
/// @namespace Coupons
/// @author Samchon
model hub_coupons {
  /// @format uuid
  id String @id @db.Uuid

  /// Customers of the seller or administrator who registered the discount coupon 
  /// {@link hub_customers.id}
  hub_customer_id String @db.Uuid

  /// Affiliate member's {@link hub_members.id}
  ///
  /// @format uuid.
  hub_member_id String @db.Uuid

  /// Type of user who registered the discount coupon.
  ///
  /// - seller: seller
  /// - administrator: administrator
  actor_type String @db.VarChar

  /// Representative name of discount coupon.
  name String @db.VarChar

  /// Can discount coupons be viewed publicly?
  ///
  /// - public: Coupons available for ordering can be viewed in bulk
  /// - private: Unable to view in bulk
  /// - Randomly assigned by the seller or administrator
  /// - Can only be issued through a one-time link
  access String @db.VarChar

  /// Exclusivity.
  ///
  /// An exclusive discount coupon refers to a discount coupon that has an
  /// exclusive relationship with other discount coupons and can only be used alone.
  /// In other words, when an exclusive discount coupon is used, no other discount
  /// coupon can be used for the same {@link hub_orders order} or
  /// {@link hub_order_goods product}.
  exclusive Boolean @db.Boolean

  /// Discount Unit.
  ///
  /// If the discount unit is an absolute amount, it is applied only once to
  /// {@link hub_sale_snapshot_unit_stock_prices.fixed fixed cost},
  /// while if the unit is a percentage, it is applied repeatedly every month to
  /// both fixed and variable costs.
  ///
  /// - amount: absolute amount
  /// - percent: percent
  unit String @db.VarChar

  /// Discount amount.
  ///
  /// If the discount unit is a percentage, enter 0 to 100, if it is an absolute
  /// amount, enter freely.
  ///
  /// @exclusiveMinimum 0
  value Float @db.DoublePrecision

  /// Minimum purchase amount for discount.
  ///
  /// If this value is set, the discount coupon cannot be applied to the total
  /// order amount (monthly fixed cost) that falls below this value. Of course,
  /// if this value is `NULL`, there is no condition for the minimum amount.
  ///
  /// @exclusiveMinimum 0
  threshold Float? @db.DoublePrecision

  /// Maximum amount of discount possible.
  ///
  /// If you set this value, no matter how much you order, it will not be discounted
  /// more than this amount.
  ///
  /// @exclusiveMinimum 0
  limit Float? @db.DoublePrecision

  /// Issuance quantity limit.
  ///
  /// If there is a limit on the issuance quantity, tickets cannot be issued beyond
  /// this value.
  ///
  /// In other words, the concept of first-come-first-served N coupons is created.
  ///
  /// @format uint
  /// @minimum 1
  volume Int? @db.Integer

  /// Limit the issuance quantity per person.
  ///
  /// As a limit on the total issuance quantity per person, it is usually assigned
  /// 1 to limit duplicate issuance to the same citizen, or NULL to not impose
  /// a limit.
  ///
  /// Of course, you can limit the total issuance quantity to the same citizen by
  /// assigning a value of N.
  ///
  /// @format uint
  /// @minimum 1
  volume_per_citizen Int? @db.Integer

  /// Expiration date.
  ///
  /// The concept of expiry after N days after receiving the discount coupon ticket.
  ///
  /// Therefore, the customer should consume the ticket within N days after issuing it.
  ///
  /// @format uint
  /// @minimum 1
  expired_in Int? @db.Integer

  /// Expiration date.
  ///
  /// The concept of expiration after YYYY-MM-DD has passed after receiving the
  /// discount coupon ticket.
  ///
  /// Double restriction is possible with {@link hub_coupons.expired_in}.
  expired_at DateTime? @db.Timestamptz

  /// Issuance start date.
  opened_at DateTime? @db.Timestamptz

  /// Issuance End Date.
  ///
  /// Tickets cannot be issued after this date.
  ///
  /// However, previously issued tickets can still be used until their
  /// {@link hub_coupon_tickets.expired_at expiration date}.
  closed_at DateTime? @db.Timestamptz

  /// The date and time the record was created.
  created_at DateTime @db.Timestamptz

  /// Discount coupon editing date.
  ///
  /// Editing is only possible before the issuance start date.
  updated_at DateTime @db.Timestamptz

  /// Discount coupon deletion date.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Customer information of the administrator or seller who created the
  /// discount coupon.
  customer hub_customers @relation(fields: [hub_customer_id], references: [id], onDelete: Cascade)

  member hub_members @relation(fields: [hub_member_id], references: [id], onDelete: Cascade)

  /// List of constraints.
  ///
  /// Applies when constraints are applied to discount coupons by
  /// each classification unit.
  criterias hub_coupon_criterias[]

  /// List of disposable codes.
  ///
  /// If the accessor value of this discount coupon is private, a dedicated code
  /// is required to issue a ticket for that discount coupon. This is the list of
  /// such disposable codes.
  disposables hub_coupon_disposables[]

  /// Ticket List.
  ///
  /// A list of tickets issued to customers as discount coupons.
  tickets hub_coupon_tickets[]

  /// A reverse regular table that records the remaining inventory quantity.
  ///
  /// Used when there is a quantity limit for issuing this discount coupon.
  inventory mv_hub_coupon_inventories?

  /// A reverse regular table that records the remaining stock per citizen.
  ///
  /// Used when there is a limit to the number of coupons issued per person.
  citizen_inventories mv_hub_coupon_citizen_inventories[]

  @@index([name])
  @@index([actor_type, hub_customer_id])
  @@index([created_at])
  @@index([opened_at])
}

/// Supertype for the conditions for the application of discount coupons.
///
/// `hub_coupon_criterias` is a supertype entity that visualizes the conditions
/// for the application of discount coupons. All subtype entities that want to
/// impose restrictions on the reference unit of discount coupons are created by
/// inheriting this entity. For example, the entity
/// {@link hub_coupon_criteria_of_sections}, which is designed to restrict the
/// application target for a specific {@link hub_sections section}, inherits this
/// entity, `hub_coupon_criterias`.
///
/// In addition, the constraint on the reference unit can be determined through the
/// `direction` attribute, whether it proceeds as an inclusion condition or an
/// exclusion condition. If the `direction` value is ``include``, the coupon is
/// applicable only to the reference target, and on the contrary, if the `direction`
/// value is ``exclude``, the coupon is not applicable to the reference target.
///
/// @namespace Coupons @author Samchon
model hub_coupon_criterias {
  /// @format uuid
  id String @id @db.Uuid

  /// {@link hub_coupons.id} of the affiliate discount coupon
  ///
  /// @format uuid
  hub_coupon_id String @db.Uuid

  /// The type of discount coupon.
  ///
  /// Indicates what subtype it has.
  type String @db.VarChar

  /// Direction in which constraints are applied.
  ///
  /// - include: inclusion conditions
  /// - exclude: exclusion conditions
  direction String @db.VarChar

  /// The order of placement in the affiliate discount coupon.
  ///
  /// @format int
  sequence Int @db.Integer

  //----
  // RELATIONS
  //----
  /// Affiliate Discount Coupon
  coupon hub_coupons @relation(fields: [hub_coupon_id], references: [id], onDelete: Cascade)

  of_section hub_coupon_criteria_of_sections?
  of_sale    hub_coupon_criteria_of_sales?
  of_funnel  hub_coupon_criteria_of_funnels?
  of_seller  hub_coupon_criteria_of_sellers?

  @@index([hub_coupon_id])
}

/// Conditions for sections of discount coupons.
///
/// `hub_coupon_criteria_of_sections` is a subtype entity of
/// {@link hub_coupon_criterias}, and is used to set conditions for specific
/// {@link hub_sections}.
///
/// If the {@link hub_coupon_criterias.direction} value is `"include"`,
/// the coupon can only be used for the corresponding section, and if it is `"exclude"`,
/// the coupon cannot be used. And if there are multiple `hub_coupon_criteria_of_sections`
/// records in one {@link hub_coupons coupons}, then the condition is set for each
/// group. It is a coupon that can be applied or not applied to the target sections.
///
/// @namespace Coupons
/// @author Samchon
model hub_coupon_criteria_of_sections {
  /// @format uuid
  id String @id @db.Uuid

  /// {@link hub_coupon_criterias.id} of the affiliate discount coupon
  ///
  /// @format uuid
  hub_section_id String @db.Uuid

  //----
  // RELATIONS
  //----
  /// Super type entity.
  base hub_coupon_criterias @relation(fields: [id], references: [id], onDelete: Cascade)

  /// The belonging section.
  section hub_sections @relation(fields: [hub_section_id], references: [id], onDelete: Cascade)

  @@index([hub_section_id])
}

/// Conditions for sellers of discount coupons.
///
/// `hub_coupon_criteria_of_sellers` is a subtype entity of
/// {@link hub_coupon_criterias}, and is used when setting conditions for specific
/// {@link hub_sellers sellers}.
///
/// If the value of {@link hub_coupon_criterias.direction} is `"include"`,
/// the coupon can only be used for the seller, and if it is `"exclude"`,
/// the coupon cannot be used.
///
/// And if there are multiple `hub_coupon_criteria_of_sellers` records in one
/// {@link hub_coupons coupons}, then the condition is applied as a group. It is a
/// coupon that can or cannot be applied to the target sellers.
///
/// @namespace Coupons
/// @author Samchon
model hub_coupon_criteria_of_sellers {
  /// @format uuid
  id String @id @db.Uuid

  /// Target seller's {@link hub_sellers.id}
  ///
  /// @format uuid
  hub_seller_id String @db.Uuid

  //----
  // RELATIONS
  //----
  /// Supertype entity.
  base hub_coupon_criterias @relation(fields: [id], references: [id], onDelete: Cascade)

  /// Target seller.
  seller hub_sellers @relation(fields: [hub_seller_id], references: [id], onDelete: Cascade)

  @@index([hub_seller_id])
}

/// Conditions for a specific item of a discount coupon.
///
/// `hub_coupon_criteria_of_sales` is a subtype entity of {@link hub_coupon_criterias},
/// and is used when setting conditions for a specific {@link hub_sales item}.
///
/// If the {@link hub_coupon_criterias.direction} value is `"include"`,
/// the coupon can only be used for that item, and if it is `"exclude"`,
/// the coupon cannot be used.
///
/// And if there are multiple `hub_coupon_criteria_of_sales` records in a
/// {@link hub_coupons coupon}, then the condition is applied to the group. It is
/// a coupon that can or cannot be applied to the target items.
///
/// @namespace Coupons
/// @author Samchon
model hub_coupon_criteria_of_sales {
  /// @format uuid
  id String @id @db.Uuid

  /// {@link hub_sales.id} of the target property
  ///
  /// @format uuid
  hub_sale_id String @db.Uuid

  //----
  // RELATIONS
  //----
  /// Supertype entity.
  base hub_coupon_criterias @relation(fields: [id], references: [id], onDelete: Cascade)

  /// Target property.
  sale hub_sales @relation(fields: [hub_sale_id], references: [id], onDelete: Cascade)

  @@index([hub_sale_id])
}

/// Limiting the inflow path of discount coupons.
///
/// `hub_coupon_criteria_of_funnels` is a subtype entity of
/// {@link hub_coupon_criterias}, and is used when you want to issue or exclude
/// {@link hub_copuons discount coupons} only to {@link hub_customers customers}
/// who came from a specific path.
///
/// There are three ways to limit the inflow path. First is
/// {@link hub_customers.referrer}, and in addition, by parsing
/// {@link hub_customers.href}, which records the customer's access address, you
/// can restrict it by specific URL or variable unit.
///
/// @namespace Coupons
/// @author Samchon
model hub_coupon_criteria_of_funnels {
  //----
  // COLUMNS
  //----
  /// PK + FK.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// What kind of funnel is it?
  ///
  /// - path
  /// - referrer
  /// - variable
  kind String @db.VarChar

  /// The key of the constraint, used when `kind` is "variable".
  key String? @db.VarChar

  /// The value of the constraint.
  value String @db.VarChar(80000)

  //----
  // RELATIONS
  //----
  /// Supertype entity.
  base hub_coupon_criterias @relation(fields: [id], references: [id], onDelete: Cascade)

  @@index([kind, key, value])
}

/// Discount coupon ticket issuance history.
///
/// hub_coupon_tickets is an entity that visualizes the discount coupon tickets
/// issued to customers.
///
/// And if the target {@link hub_coupons discount coupon specification} itself has
/// an expiration date,
///
/// the expiration date is recorded in `expired_at` and it is automatically discarded
/// after that period. Of course, if the discount coupon ticket was used
/// {@link hub_orders order} within the expiration date,
/// {@link hub_coupon_ticket_payments} is used.
///
/// @namespace Coupons
/// @author Samchon
model hub_coupon_tickets {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// {@link hub_customers.id} of the customer you are affiliated with
  ///
  /// @format uuid
  hub_customer_id String @db.Uuid

  /// Affiliate member's {@link hub_members.id}
  ///
  /// @format uuid.
  hub_member_id String? @db.Uuid

  /// {@link hub_coupons.id} of the coupon
  ///
  /// @format uuid
  hub_coupon_id String @db.Uuid

  /// {@link hub_coupon_disposables.id} of the disposable code
  ///
  /// Used when this ticket was issued through a disposable code of a private
  /// discount coupon.
  ///
  /// @format uuid
  hub_coupon_disposable_id String? @db.Uuid

  /// Ticket issuance date and time.
  created_at DateTime @db.Timestamptz

  /// Ticket expiration date.
  expired_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  customer   hub_customers           @relation(fields: [hub_customer_id], references: [id], onDelete: Cascade)
  coupon     hub_coupons             @relation(fields: [hub_coupon_id], references: [id], onDelete: Cascade)
  disposable hub_coupon_disposables? @relation(fields: [hub_coupon_disposable_id], references: [id], onDelete: Cascade)
  member     hub_members?            @relation(fields: [hub_member_id], references: [id], onDelete: Cascade)

  payment hub_coupon_ticket_payments?

  @@unique([hub_coupon_disposable_id])
  @@index([hub_coupon_id, created_at])
  @@index([hub_member_id])
  @@index([hub_customer_id])
}

/// Discount coupon ticket payment (payment) history.
///
/// `hub_coupon_ticket_payments` is an entity that visualizes payment information 
/// for {@link hub_coupon_tickets} discount coupon tickets for 
/// {@link hub_orders orders}. It is used when {@link hub_customers consumers} 
/// use the {@link hub_coupon_tickets discount coupon tickets} they received for 
/// {@link hub_orders orders} and receive a deduction for the payment amount.
///
/// Also, {@link hub_orders} itself is not an entity used in the situation where 
/// an order is completed, but is an entity designed to express the order 
/// application stage as well. Therefore, even if this `hub_coupon_ticket_payments` 
/// record is created, the {@link hub_coupon_tickets tickets} that are actually 
/// attributed do not disappear. Until the customer extends the order, the tickets 
/// can be understood as a kind of deposit status.
///
/// Also, this record can be deleted by the customer himself by reversing the 
/// payment of the ticket, but the order itself is also canceled and deleted 
/// together.
///
/// @namespace Coupons
/// @author Samchon
model hub_coupon_ticket_payments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// {@link hub_coupon_tickets.id} of the attached ticket
  ///
  /// @format uuid
  hub_coupon_ticket_id String @db.Uuid

  /// {@link hub_orders.id} of target order
  ///
  /// @format uuid
  hub_order_id String @db.Uuid

  /// The order of placement in the order of the attribution.
  ///
  /// @format int
  sequence Int @db.Integer

  /// The date and time the record was created.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Affiliation ticket.
  ticket hub_coupon_tickets @relation(fields: [hub_coupon_ticket_id], references: [id], onDelete: Cascade)

  /// Target order.
  order hub_orders @relation(fields: [hub_order_id], references: [id], onDelete: Cascade)

  @@unique([hub_coupon_ticket_id])
  @@index([hub_order_id])
}

/// Discount coupon issuance code management.
///
/// If a discount coupon is not publicly available so that anyone can receive the 
/// ticket, but must enter a specific password (one-time code) to receive it,
/// then this `hub_coupon_disposables` entity is used.
///
/// And this code is "one-time". That is, if any customer enters the code,
/// then the code is discarded at the point when the ticket issuance to the customer 
/// is completed. Therefore, if you want to issue tickets multiple times with a 
/// discount coupon as a secret code, the issuance code must also be supported in 
/// the same quantity.
///
/// @namespace Coupons
/// @author Samchon
model hub_coupon_disposables {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// {@link hub_coupons.id} of the affiliate discount coupon
  ///
  /// @format uuid
  hub_coupon_id String @db.Uuid

  /// Identifier code.
  ///
  /// One-time issuance code.
  code String @db.VarChar

  /// The date and time the record was created.
  created_at DateTime @db.Timestamptz

  /// The expiration date of the single-use code.
  expired_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  /// Affiliate discount coupon.
  coupon hub_coupons @relation(fields: [hub_coupon_id], references: [id], onDelete: Cascade)

  /// Tickets issued using the code.
  ticket hub_coupon_tickets?

  @@unique([code])
  @@index([hub_coupon_id])
}

/// Stock quantity of discount coupons.
///
/// @author Samchon
/// @hidden
model mv_hub_coupon_inventories {
  //----
  // COLUMNS
  //----
  /// {@link hub_coupons.id} of the coupon
  hub_coupon_id String @id @db.Uuid

  /// Remaining stock quantity.
  value Int @db.Integer

  //----
  // RELATIONS
  //----
  coupon hub_coupons @relation(fields: [hub_coupon_id], references: [id], onDelete: Cascade)
}

/// Stock quantity per citizen of discount coupon.
///
/// @author Samchon
/// @hidden
model mv_hub_coupon_citizen_inventories {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// {@link hub_coupons.id} of the affiliate discount coupon
  ///
  /// @format uuid
  hub_coupon_id String @db.Uuid

  /// {@link hub_citizens.id} of the citizenship
  ///
  /// @format uuid
  hub_citizen_id String @db.Uuid

  /// Remaining stock quantity.
  value Int @db.Integer

  //----
  // RELATIONS
  //----
  coupon  hub_coupons  @relation(fields: [hub_coupon_id], references: [id], onDelete: Cascade)
  citizen hub_citizens @relation(fields: [hub_citizen_id], references: [id], onDelete: Cascade)

  @@unique([hub_coupon_id, hub_citizen_id])
  @@index([hub_citizen_id])
}
